[{"path":"https://lschneiderbauer.github.io/ricci/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://lschneiderbauer.github.io/ricci/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://lschneiderbauer.github.io/ricci/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://lschneiderbauer.github.io/ricci/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://lschneiderbauer.github.io/ricci/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://lschneiderbauer.github.io/ricci/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://lschneiderbauer.github.io/ricci/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://lschneiderbauer.github.io/ricci/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://lschneiderbauer.github.io/ricci/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://lschneiderbauer.github.io/ricci/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://lschneiderbauer.github.io/ricci/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://lschneiderbauer.github.io/ricci/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://lschneiderbauer.github.io/ricci/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://lschneiderbauer.github.io/ricci/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://lschneiderbauer.github.io/ricci/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://lschneiderbauer.github.io/ricci/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://lschneiderbauer.github.io/ricci/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://lschneiderbauer.github.io/ricci/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://lschneiderbauer.github.io/ricci/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://lschneiderbauer.github.io/ricci/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://lschneiderbauer.github.io/ricci/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"https://lschneiderbauer.github.io/ricci/articles/ricci.html","id":"creating-a-labeled-array-tensor","dir":"Articles","previous_headings":"","what":"Creating a labeled array (tensor)","title":"ricci","text":"can use array create labeled array (tensor) lower index labels , j, k: a_{ijk} default, indices assumed lower indices. can use “+” prefix create upper index label. a_{ij}^{\\;\\;k}","code":"library(ricci)  a <- array(1:(2^3), dim = c(2, 2, 2)) a %_% .(i, j, k) #> <Labeled Array> [2x2x2] .(-i, -j, -k) a %_% .(i, j, +k) #> <Labeled Array> [2x2x2] .(-i, -j, +k)"},{"path":"https://lschneiderbauer.github.io/ricci/articles/ricci.html","id":"performing-calculations","dir":"Articles","previous_headings":"","what":"Performing calculations","title":"ricci","text":"Creating index labels interesting helpful. act labeling tensor index slots becomes useful labels set trigger implicit calculations, combined tensors via multiplication addition.","code":""},{"path":"https://lschneiderbauer.github.io/ricci/articles/ricci.html","id":"contraction","dir":"Articles","previous_headings":"Performing calculations","what":"Contraction","title":"ricci","text":"Repeated index labels opposite position implicitly contracted. b_k=a_{\\;k}^{\\;}","code":"b <- a %_% .(i, +i, k) b #> <Labeled Array> [2] .(-k) #> [1]  5 13"},{"path":"https://lschneiderbauer.github.io/ricci/articles/ricci.html","id":"diagonal-subsetting","dir":"Articles","previous_headings":"Performing calculations","what":"Diagonal subsetting","title":"ricci","text":"Repeated labels position (upper lower) trigger diagonal subsetting. c_{ik}=a_{iik}","code":"c <- a %_% .(i, i, k) c #> <Labeled Array> [2x2] .(-i, -k) #>      [,1] [,2] #> [1,]    1    5 #> [2,]    4    8"},{"path":"https://lschneiderbauer.github.io/ricci/articles/ricci.html","id":"outer-product","dir":"Articles","previous_headings":"Performing calculations","what":"Outer product","title":"ricci","text":"conventions apply arbitrary tensor multiplication. d_{ijklmn}=a_{ijk}a_{lmn}","code":"d <- a %_% .(i, j, k) * a %_% .(l, m, n) d #> <Labeled Array> [2x2x2x2x2x2] .(-i, -j, -k, -l, -m, -n)"},{"path":"https://lschneiderbauer.github.io/ricci/articles/ricci.html","id":"inner-product","dir":"Articles","previous_headings":"Performing calculations","what":"Inner product","title":"ricci","text":"e=a_{ijk}^{ijk}","code":"e <- a %_% .(i, j, k) * a %_% .(+i, +j, +k) e #> <Scalar> #> [1] 204"},{"path":"https://lschneiderbauer.github.io/ricci/articles/ricci.html","id":"mixed-product-tensor-multiplication-w-contractions-and-subsetting","dir":"Articles","previous_headings":"Performing calculations","what":"Mixed product: tensor multiplication w/ contractions and subsetting","title":"ricci","text":"f_j=a_{ijk}^{\\;k}_{\\;j}","code":"f <- a %_% .(i, j, k) * a %_% .(+i, j, +k) f #> <Labeled Array> [2] .(-j) #> [1]  66 138"},{"path":"https://lschneiderbauer.github.io/ricci/articles/ricci.html","id":"element-wise-product","dir":"Articles","previous_headings":"Performing calculations","what":"Element-wise product","title":"ricci","text":"g_{ijk}=a_{ijk}a_{ijk}","code":"g <- a %_% .(i, j, k) * a %_% .(i, j, k) g #> <Labeled Array> [2x2x2] .(-i, -j, -k)"},{"path":"https://lschneiderbauer.github.io/ricci/articles/ricci.html","id":"kronecker-product","dir":"Articles","previous_headings":"Performing calculations","what":"Kronecker product","title":"ricci","text":"Kronecker product simply tensor product whose underlying vector space basis relabeled. present context realized combining multiple index labels one. associated dimension new label simply product dimensions associated old index labels respectively.","code":"(a %_% .(i, j, k) * a %_% .(l, m, n)) |>   kron(.(i, l) -> r, .(j, m) -> p, .(k, n) -> q) #> <Labeled Array> [4x4x4] .(-q, -p, -r)"},{"path":"https://lschneiderbauer.github.io/ricci/articles/ricci.html","id":"addition-and-substraction","dir":"Articles","previous_headings":"Performing calculations","what":"Addition and Substraction","title":"ricci","text":"Tensor addition subtraction taking care correct index slot matching (index labels), position index matter. h_{ijk} = a_{ijk} + a_{jik}","code":"h <- a %_% .(i, j, k) + a %_% .(j, i, k) h #> <Labeled Array> [2x2x2] .(-i, -j, -k)"},{"path":"https://lschneiderbauer.github.io/ricci/articles/ricci.html","id":"anti-symmetrization","dir":"Articles","previous_headings":"Performing calculations","what":"(Anti-)symmetrization","title":"ricci","text":"Taking symmetric antisymmetric part w.r.t. certain indices standard tool Ricci calculus.","code":"a %_% .(i, j, k) |> sym(i, j) #> <Labeled Array> [2x2x2] .(-i, -j, -k) a %_% .(i, j, k) |> sym(i, j, k) #> <Labeled Array> [2x2x2] .(-i, -j, -k)  a %_% .(i, j, k) |> asym(i, j) #> <Labeled Array> [2x2x2] .(-i, -j, -k) a %_% .(i, j, k) |> asym(i, j, k) #> <Labeled Array> [2x2x2] .(-i, -j, -k)"},{"path":"https://lschneiderbauer.github.io/ricci/articles/ricci.html","id":"unlabel-a-tensor","dir":"Articles","previous_headings":"","what":"Unlabel a tensor","title":"ricci","text":"done calculations usually want retrieve unlabeled array use result elsewhere get life. contrast labeled array (tensor) package R array well-defined dimension ordering stripping labels tensor one specify index order. works standard generic .array(). However, avoid nonstandard evaluation S3 method, wrap indices using .().","code":"g |> as_a(i, j, k) #> , , 1 #>  #>      [,1] [,2] #> [1,]    1    9 #> [2,]    4   16 #>  #> , , 2 #>  #>      [,1] [,2] #> [1,]   25   49 #> [2,]   36   64 as.array(g, .(i, j, k)) #> , , 1 #>  #>      [,1] [,2] #> [1,]    1    9 #> [2,]    4   16 #>  #> , , 2 #>  #>      [,1] [,2] #> [1,]   25   49 #> [2,]   36   64"},{"path":"https://lschneiderbauer.github.io/ricci/articles/tensor_fields.html","id":"covariant-derivative","dir":"Articles","previous_headings":"","what":"Covariant derivative","title":"Tensor Fields","text":"main usage tensor fields {ricci} calculate covariant derivatives, .e. make use function covd(). Similar product operator * unifies products making use index structure, covd() unifies various differential operators, like e.g. “gradient”, “divergence”, “curl”, “Hessian” “Laplacian”, dimension (pseudo-) Riemannian manifold coordinate system. covd() requires two main ingredients: tensor field can act upon, metric tensor field. tensor field metric tensor thought exist manifold required specified coordinate system.","code":""},{"path":"https://lschneiderbauer.github.io/ricci/articles/tensor_fields.html","id":"examples","dir":"Articles","previous_headings":"Covariant derivative","what":"Examples","title":"Tensor Fields","text":"{ricci} already provides couple standard metric tensors, standard Euclidean metric tensor g Cartesian coordinates (x_1,x_2,x_3) simply identity matrix, spherical coordinates (r, \\phi_1, \\phi_2) metric tensor appears complicated: Equipped metrics, can example pick simple tensor field, namely scalar function f(r, \\phi_1, \\phi_2) = r^{-1}, calculate first gradient: argument .(k) nothing special simply defines name new rank array. Hessian computed similar fashion: operation can set context electrodynamics f electrostatic potential, gradient electric field. electrostatic potential can simply calculate electromagnetic tensor forming electromagnetic potential A_\\mu: can also chain multiple covariant derivatives way ’d like. well known second-order differential operator, Laplacian \\Delta = \\nabla_k \\nabla^k can easily written : One property metric tensor (Levi Civita) covariant derivative metric tensor vanishes. can test easily:","code":"library(ricci)  # enable optional simplfying procedures # (takes a toll on performance) options(ricci.auto_simplify = TRUE)  g_eucl_cart(3) #> <Covariant metric tensor field> (x1, x2, x3) #>      [,1] [,2] [,3] #> [1,]    1    0    0 #> [2,]    0    1    0 #> [3,]    0    0    1  g_eucl_sph(3) #> <Covariant metric tensor field> (r, ph1, ph2) #>      [,1] [,2]    [,3]             #> [1,] \"1\"  \"0\"     \"0\"              #> [2,] \"0\"  \"r^2*1\" \"0\"              #> [3,] \"0\"  \"0\"     \"r^2*sin(ph1)^2\" \"1/r\" |> covd(.(k), g = g_eucl_sph(3)) #> <Labeled Array> [3] .(-k) #> [1] \"-(1/r^2)\" \"0\"        \"0\" \"1/r\" |> covd(.(k, l), g = g_eucl_sph(3)) #> <Labeled Array> [3x3] .(-k, -l) #>      [,1]    [,2]     [,3]              #> [1,] \"2/r^3\" \"0\"      \"0\"               #> [2,] \"0\"     \"(-1)/r\" \"0\"               #> [3,] \"0\"     \"0\"      \"(-sin(ph1)^2)/r\" # electromagnetic potential A <- c(\"1/r\", \"0\", \"0\", \"0\")  A %_% .(m) |>   covd(.(n), g = g_mink_sph(4)) |>   asym(m, n) #> <Labeled Array> [4x4] .(-m, -n) #>      [,1]        [,2]           [,3] [,4] #> [1,] \"0\"         \"(-1)/(2*r^2)\" \"0\"  \"0\"  #> [2,] \"1/(2*r^2)\" \"0\"            \"0\"  \"0\"  #> [3,] \"0\"         \"0\"            \"0\"  \"0\"  #> [4,] \"0\"         \"0\"            \"0\"  \"0\" # on scalar field \"1/r\" |> covd(.(k, +k), g = g_mink_sph(4)) #> <Scalar> #> [1] \"0\"  # on a vector field A %_% .(i) |> covd(.(k, +k), g = g_mink_sph(4)) #> <Labeled Array> [4] .(-i) #> [1] \"0\" \"0\" \"0\" \"0\" g <- g_eucl_sph(3)  g %_% .(i, j) |>   covd(.(k), g = g) |>   as_a(i, j, k) #> , , 1 #>  #>      [,1] [,2] [,3] #> [1,] \"0\"  \"0\"  \"0\"  #> [2,] \"0\"  \"0\"  \"0\"  #> [3,] \"0\"  \"0\"  \"0\"  #>  #> , , 2 #>  #>      [,1] [,2] [,3] #> [1,] \"0\"  \"0\"  \"0\"  #> [2,] \"0\"  \"0\"  \"0\"  #> [3,] \"0\"  \"0\"  \"0\"  #>  #> , , 3 #>  #>      [,1] [,2] [,3] #> [1,] \"0\"  \"0\"  \"0\"  #> [2,] \"0\"  \"0\"  \"0\"  #> [3,] \"0\"  \"0\"  \"0\""},{"path":"https://lschneiderbauer.github.io/ricci/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Lukas Schneiderbauer. Author, maintainer, copyright holder.","code":""},{"path":"https://lschneiderbauer.github.io/ricci/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Schneiderbauer L (2025). ricci: Ricci Calculus. R package version 0.1.1.9000, https://github.com/lschneiderbauer/ricci.","code":"@Manual{,   title = {ricci: Ricci Calculus},   author = {Lukas Schneiderbauer},   year = {2025},   note = {R package version 0.1.1.9000},   url = {https://github.com/lschneiderbauer/ricci}, }"},{"path":"https://lschneiderbauer.github.io/ricci/index.html","id":"ricci-","dir":"","previous_headings":"","what":"Ricci Calculus","title":"Ricci Calculus","text":"goal {ricci} provide compact1 R interface performing tensor calculations. achieved allowing (upper lower) index labeling R’s array making use Ricci calculus conventions implicitly trigger contractions diagonal subsetting. Explicit tensor operations, addition, subtraction multiplication tensors via standard operators (*, +, -, /, ==), raising lowering indices, taking symmetric antisymmetric tensor parts, well Kronecker product available. Common tensors like Kronecker delta, Levi Civita epsilon, certain metric tensors, Christoffel symbols, Riemann well Ricci tensors provided. covariant derivative tensor fields respect metric tensor can evaluated. effort made provide user useful error messages. {ricci} uses calculus package (Guidotti 2022) behind scenes perform calculations provides alternative interface subset functionality. {calculus} supports symbolic calculations, allowing {ricci} support well. Symbolic expressions optionally simplified Ryacas package installed.","code":""},{"path":"https://lschneiderbauer.github.io/ricci/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Ricci Calculus","text":"can install latest CRAN release ricci : Alternatively, can install development version ricci GitHub :","code":"install.packages(\"ricci\") # install.packages(\"pak\") pak::pak(\"lschneiderbauer/ricci\")"},{"path":"https://lschneiderbauer.github.io/ricci/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Ricci Calculus","text":"central object R’s array. Adding index slot labels allows us perform common tensor operations implicitly. desired calculations carried can remove labels obtain ordinary array. following (admittedly artificial) example shows express contraction two tensors, subsequent symmetrization diagonal subsetting. demonstration purposes use arbitrary array rank 3. instructions work symbolic array: Another main feature covariant derivative symbolic arrays. following examples calculate Hessian matrix well Laplacian scalar function \\sin(r) spherical coordinates three dimensions. D_{ik} = \\nabla_i \\nabla_k \\sin(r) \\Delta \\sin(r) = \\nabla_i \\nabla^\\sin(r) covariant derivative can taken scalars, general indexed tensors, following example, involving curl , shows. \\left(\\nabla \\times \\right)^= \\varepsilon^{}_{\\;jk} \\nabla^j ^k details, see vignette(\"ricci\", package = \"ricci\"). information use tensor fields covariant derivative, see vignette(\"tensor_fields\", package = \"ricci\").","code":"library(ricci)  # numeric data a <- array(1:(2^3), dim = c(2, 2, 2))  # create labeled array (tensor) (a %_% .(i, j, k) *   # mutliply with a labeled array (tensor) and raise index i and k   a %_% .(i, l, k) |> r(i, k, g = g_mink_cart(2))) |>   # * -i and +i as well as -k and +k dimension are implictely contracted   # the result is a tensor of rank 2   sym(j, l) |> # symmetrize over i and l   subst(l -> j) |> # rename index and trigger diagonal subsetting   as_a(j) # we unlabel the tensor with index order (j) #> [1] 8 8 # enable optional simplfying procedures # (takes a toll on performance) options(ricci.auto_simplify = TRUE)  # symbolic data a <- array(paste0(\"a\", 1:(2^3)), dim = c(2, 2, 2))  (a %_% .(i, j, k) *   # mutliply with a labeled array (tensor) and raise index i and k   a %_% .(i, l, k) |> r(i, k, g = g_mink_cart(2))) |>   # * -i and +i as well as -k and +k dimension are implictely contracted   # the result is a tensor of rank 2   sym(j, l) |> # symmetrize over i and l   subst(l -> j) |> # rename index and trigger diagonal subsetting   as_a(j) # we unlabel the tensor with index order (j) #> [1] \"a1^2+a6^2-(a5^2+a2^2)\" \"a3^2+a8^2-(a7^2+a4^2)\" covd(\"sin(r)\", .(i, k), g = g_eucl_sph(3)) |>   simplify() #> <Labeled Array> [3x3] .(-i, -k) #>      [,1]      [,2]       [,3]                  #> [1,] \"-sin(r)\" \"0\"        \"0\"                   #> [2,] \"0\"       \"r*cos(r)\" \"0\"                   #> [3,] \"0\"       \"0\"        \"r*sin(ph1)^2*cos(r)\" covd(\"sin(r)\", .(i, +i), g = g_eucl_sph(3)) |>   simplify() #> <Scalar> #> [1] \"(2*cos(r)-r*sin(r))/r\" g <- g_eucl_sph(3) a <- c(0, 1, 0)  (a %_% .(+k) |> covd(.(+j), g = g) *   e(i, j, k) |> r(i, g = g)) |>   simplify() #> <Labeled Array> [3] .(+i) #> [1] \"0\"                  \"0\"                  \"2/(r^3*sin(ph1)^2)\""},{"path":"https://lschneiderbauer.github.io/ricci/reference/Ops.tensor.html","id":null,"dir":"Reference","previous_headings":"","what":"Arithmetic tensor operations — Ops.tensor","title":"Arithmetic tensor operations — Ops.tensor","text":"labeled array (tensor) defined, tensor arithmetic operations can carried usual +, -, *, /, == symbols.","code":""},{"path":"https://lschneiderbauer.github.io/ricci/reference/Ops.tensor.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Arithmetic tensor operations — Ops.tensor","text":"","code":"# S3 method for class 'tensor' Ops(e1, e2)"},{"path":"https://lschneiderbauer.github.io/ricci/reference/Ops.tensor.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Arithmetic tensor operations — Ops.tensor","text":"e1, e2 Labeled arrays created %_%.","code":""},{"path":"https://lschneiderbauer.github.io/ricci/reference/Ops.tensor.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Arithmetic tensor operations — Ops.tensor","text":"resulting labeled array case +, -, *, /. TRUE FALSE case ==.","code":""},{"path":"https://lschneiderbauer.github.io/ricci/reference/Ops.tensor.html","id":"addition-and-subtraction","dir":"Reference","previous_headings":"","what":"Addition and Subtraction","title":"Arithmetic tensor operations — Ops.tensor","text":"Addition subtraction requires two tensors equal index structure, .e. index names position dimensions associated index names agree. index order matter, operation match dimensions index name.","code":""},{"path":"https://lschneiderbauer.github.io/ricci/reference/Ops.tensor.html","id":"multiplication","dir":"Reference","previous_headings":"","what":"Multiplication","title":"Arithmetic tensor operations — Ops.tensor","text":"Tensor multiplication takes account implicit Ricci calculus rules depending index placement. Equal-named opposite-positioned dimensions contracted. Equal-named equal-positioned dimensions subsetted. result outer product distinct index names.","code":""},{"path":"https://lschneiderbauer.github.io/ricci/reference/Ops.tensor.html","id":"division","dir":"Reference","previous_headings":"","what":"Division","title":"Arithmetic tensor operations — Ops.tensor","text":"Division performs element-wise division. second argument scalar, element simply divided scalar. Similar addition subtraction, division requires two tensors equal index structure, .e. index names position dimensions associated index names agree.","code":""},{"path":"https://lschneiderbauer.github.io/ricci/reference/Ops.tensor.html","id":"equality-check","dir":"Reference","previous_headings":"","what":"Equality check","title":"Arithmetic tensor operations — Ops.tensor","text":"tensor \\(a_{i_1 i_2 ...}\\) equal tensor \\(b_{j_1 j_2 ...}\\) index structure agrees components equal.","code":""},{"path":[]},{"path":"https://lschneiderbauer.github.io/ricci/reference/Ops.tensor.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Arithmetic tensor operations — Ops.tensor","text":"","code":"a <- array(1:4, c(2, 2)) b <- array(3 + 1:4, c(2, 2))  # addition a %_% .(i, j) + b %_% .(j, i) #> <Labeled Array> [2x2] .(-i, -j) #>      [,1] [,2] #> [1,]    5    8 #> [2,]    8   11  # multiplication a %_% .(i, j) * b %_% .(+i, k) #> <Labeled Array> [2x2] .(-j, -k) #>      [,1] [,2] #> [1,]   14   20 #> [2,]   32   46  # division a %_% .(i, j) / 10 #> <Labeled Array> [2x2] .(-i, -j) #>      [,1] [,2] #> [1,]  0.1  0.3 #> [2,]  0.2  0.4  # equality check a %_% .(i, j) == a %_% .(i, j) #> [1] TRUE a %_% .(i, j) == a %_% .(j, i) #> [1] FALSE a %_% .(i, j) == b %_% .(i, j) #> [1] FALSE  # this will err because index structure does not agree try(a %_% .(i, j) == a %_% .(k, j)) #> Error in `==`() : Tensor indices do not agree. #> ✖ Tensor index `i` appears in `e1` but not in `e2`. #> ✖ Tensor index `k` appears in `e2` but not in `e1`. #> ℹ Operation can only be carried out with two tensors having identical indices."},{"path":"https://lschneiderbauer.github.io/ricci/reference/as.array.tensor.html","id":null,"dir":"Reference","previous_headings":"","what":"Strip array labels — as.array.tensor","title":"Strip array labels — as.array.tensor","text":"Converts tensor() array() stripping index labels. index label order needs provided array's dim() order well defined.","code":""},{"path":"https://lschneiderbauer.github.io/ricci/reference/as.array.tensor.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Strip array labels — as.array.tensor","text":"","code":"# S3 method for class 'tensor' as.array(   x,   index_order = NULL,   ...,   arg = \"index_order\",   call = rlang::caller_env() )"},{"path":"https://lschneiderbauer.github.io/ricci/reference/as.array.tensor.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Strip array labels — as.array.tensor","text":"x labeled array (\"tensor\" object) created %_% tensor(). index_order index specification created .(). specification needs match labels occurring x. label order determines dimension order resulting array. ... used. arg, call Used error handling. Can ignored user.","code":""},{"path":"https://lschneiderbauer.github.io/ricci/reference/as.array.tensor.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Strip array labels — as.array.tensor","text":"tensor components usual array() object without index labels attached.","code":""},{"path":"https://lschneiderbauer.github.io/ricci/reference/as.array.tensor.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Strip array labels — as.array.tensor","text":"","code":"array(1:8, dim = c(2, 2, 2)) %_% .(i, +i, k) |> as.array(.(k)) #> [1]  5 13"},{"path":"https://lschneiderbauer.github.io/ricci/reference/as_a.html","id":null,"dir":"Reference","previous_headings":"","what":"Strip array labels — as_a","title":"Strip array labels — as_a","text":"Converts tensor() array() stripping index labels. index label order needs provided array's dim() order well defined.","code":""},{"path":"https://lschneiderbauer.github.io/ricci/reference/as_a.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Strip array labels — as_a","text":"","code":"as_a(x, ...)"},{"path":"https://lschneiderbauer.github.io/ricci/reference/as_a.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Strip array labels — as_a","text":"x labeled array (\"tensor\" object) created %_% tensor(). ... Index labels separated commas optionally prefixed \"+\" \"-\" indicate index position (upper lower respectively). prefix provided, lower index (\"-\") assumed. argument uses non-standard evaluation: R symbol reserved keyword can used. specification needs match labels occurring x. label order determines dimension ordering resulting array.","code":""},{"path":"https://lschneiderbauer.github.io/ricci/reference/as_a.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Strip array labels — as_a","text":"usual array() without attached labels. dimension order determined ....","code":""},{"path":[]},{"path":"https://lschneiderbauer.github.io/ricci/reference/as_a.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Strip array labels — as_a","text":"","code":"array(1:8, dim = c(2, 2, 2)) %_% .(i, +i, k) |> as_a(k) #> [1]  5 13"},{"path":"https://lschneiderbauer.github.io/ricci/reference/asym.html","id":null,"dir":"Reference","previous_headings":"","what":"Antisymmetric tensor part — asym","title":"Antisymmetric tensor part — asym","text":"Takes antisymmetric tensor part tensor x respect specified indices .... error thrown specified indices exist.","code":""},{"path":"https://lschneiderbauer.github.io/ricci/reference/asym.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Antisymmetric tensor part — asym","text":"","code":"asym(x, ...)"},{"path":"https://lschneiderbauer.github.io/ricci/reference/asym.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Antisymmetric tensor part — asym","text":"x labeled tensor object, created %_% tensor(). ... number index expressions. indices need occur x.","code":""},{"path":"https://lschneiderbauer.github.io/ricci/reference/asym.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Antisymmetric tensor part — asym","text":"modified tensor object.","code":""},{"path":[]},{"path":"https://lschneiderbauer.github.io/ricci/reference/asym.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Antisymmetric tensor part — asym","text":"","code":"a <- array(1:4, dim = c(2, 2)) a %_% .(i, j) |> asym(i, j) #> <Labeled Array> [2x2] .(-i, -j) #>      [,1] [,2] #> [1,]  0.0  0.5 #> [2,] -0.5  0.0"},{"path":"https://lschneiderbauer.github.io/ricci/reference/at.html","id":null,"dir":"Reference","previous_headings":"","what":"Evaluate a symbolic array — at","title":"Evaluate a symbolic array — at","text":"Evaluates symbolic array particular point parameter space. Partial evaluation allowed, variables/symbols need accounted . result numeric array.","code":""},{"path":"https://lschneiderbauer.github.io/ricci/reference/at.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Evaluate a symbolic array — at","text":"","code":"at(x, vars)  # S3 method for class 'array' at(x, vars)  # S3 method for class 'tensor' at(x, vars)"},{"path":"https://lschneiderbauer.github.io/ricci/reference/at.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Evaluate a symbolic array — at","text":"x symbolic array() tensor(). vars named vector parameter-value assignments. named entry represents substitution symbol given value.","code":""},{"path":"https://lschneiderbauer.github.io/ricci/reference/at.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Evaluate a symbolic array — at","text":"numeric array() tensor().","code":""},{"path":"https://lschneiderbauer.github.io/ricci/reference/at.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Evaluate a symbolic array — at","text":"","code":"g_sph(3) |> at(c(ph1 = 0, ph2 = 0)) #>      [,1] [,2] [,3] #> [1,]    1    0    0 #> [2,]    0    0    0 #> [3,]    0    0    0"},{"path":"https://lschneiderbauer.github.io/ricci/reference/christoffel.html","id":null,"dir":"Reference","previous_headings":"","what":"Christoffel symbols — christoffel","title":"Christoffel symbols — christoffel","text":"Provides Christoffel symbols first kind \\(\\Gamma_{ijk}\\) respect Levi Civita connection given metric tensor.","code":""},{"path":"https://lschneiderbauer.github.io/ricci/reference/christoffel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Christoffel symbols — christoffel","text":"","code":"christoffel(g)"},{"path":"https://lschneiderbauer.github.io/ricci/reference/christoffel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Christoffel symbols — christoffel","text":"g covariant metric tensor, \"metric_field\" object. See metric_field() create new metric tensor, use predefined metrics, e.g. g_eucl_cart().","code":""},{"path":"https://lschneiderbauer.github.io/ricci/reference/christoffel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Christoffel symbols — christoffel","text":"Returns Christoffel symbols first kind \\(\\Gamma_{ijk}\\) rank 3 array().","code":""},{"path":"https://lschneiderbauer.github.io/ricci/reference/christoffel.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Christoffel symbols — christoffel","text":"Christoffel symbols rank 3 array numbers.","code":""},{"path":[]},{"path":"https://lschneiderbauer.github.io/ricci/reference/christoffel.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Christoffel symbols — christoffel","text":"","code":"christoffel(g_eucl_sph(3)) #> , , 1 #>  #>      [,1] [,2]            [,3]                         #> [1,] \"0\"  \"0\"             \"0\"                          #> [2,] \"0\"  \"((2 * r)) / 2\" \"0\"                          #> [3,] \"0\"  \"0\"             \"((2 * r * sin(ph1)^2)) / 2\" #>  #> , , 2 #>  #>      [,1]            [,2]               #> [1,] \"0\"             \"( - (2 * r)) / 2\" #> [2,] \"((2 * r)) / 2\" \"0\"                #> [3,] \"0\"             \"0\"                #>      [,3]                                        #> [1,] \"0\"                                         #> [2,] \"0\"                                         #> [3,] \"((r^2 * (2 * (cos(ph1) * sin(ph1))))) / 2\" #>  #> , , 3 #>  #>      [,1]                         [,2]                                        #> [1,] \"0\"                          \"0\"                                         #> [2,] \"0\"                          \"0\"                                         #> [3,] \"((2 * r * sin(ph1)^2)) / 2\" \"((r^2 * (2 * (cos(ph1) * sin(ph1))))) / 2\" #>      [,3]                                           #> [1,] \"( - (2 * r * sin(ph1)^2)) / 2\"                #> [2,] \"( - (r^2 * (2 * (cos(ph1) * sin(ph1))))) / 2\" #> [3,] \"0\"                                            #>"},{"path":"https://lschneiderbauer.github.io/ricci/reference/covd.html","id":null,"dir":"Reference","previous_headings":"","what":"Covariant Derivative — covd","title":"Covariant Derivative — covd","text":"Calculates (symbolic) covariant derivative \\(\\nabla_\\rho a_{\\mu_{1} \\mu_{2} ...}^{\\nu_{1}\\nu_{2}...}\\) respect Levi Civita connection (symbolic) tensor field. result new tensor one rank higher original tensor rank.","code":""},{"path":"https://lschneiderbauer.github.io/ricci/reference/covd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Covariant Derivative — covd","text":"","code":"covd(x, i, g, act_on = NULL)"},{"path":"https://lschneiderbauer.github.io/ricci/reference/covd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Covariant Derivative — covd","text":"x labeled tensor object, created %_% tensor(). covd() handles symbolic derivatives, .e. tensor components required character()-valued consist mathematical expressions terms coordinates identical coordinates used g. index slot label specification created .(). number indices specify number covariant derivatives taken order. covariant derivative adds one index specified names. covariant derivatives calculated, implicit contraction rules applied (case reoccurring index label names). g covariant metric tensor, \"metric_field\" object. See metric_field() create new metric tensor, use predefined metrics, e.g. g_eucl_cart(). act_on optional index slot label specification created .() specifies indices covariant derivative act . might useful tensor factors elements tangent space underlying manifold. provided covariant derivative acts indices. indices selected explicitly (.()), covariant derivative acts like scalar.","code":""},{"path":"https://lschneiderbauer.github.io/ricci/reference/covd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Covariant Derivative — covd","text":"covariant derivative: new labeled array one additional indices (depending ).","code":""},{"path":"https://lschneiderbauer.github.io/ricci/reference/covd.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Covariant Derivative — covd","text":"Note symbolic derivatives always completely trustworthy. usually ignore subtle issues like undefined expressions certain points. example \\(\\nabla_a \\nabla^r^{-1}\\) telling: symbolic derivative evaluates zero identically, although strictly speaking derivative defined \\(r = 0\\).","code":""},{"path":[]},{"path":"https://lschneiderbauer.github.io/ricci/reference/covd.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Covariant Derivative — covd","text":"","code":"options(ricci.auto_simplify = TRUE)  # gradient of \"sin(sqrt(x1^2+x2^2+x3^2))\" in 3-dimensional euclidean space covd(\"sin(x1)\", .(k), g = g_eucl_cart(3)) #> <Labeled Array> [3] .(-k) #> [1] \"cos(x1)\" \"0\"       \"0\"        # laplace operator covd(\"sin(x1)\", .(-k, +k), g = g_eucl_cart(3)) #> <Scalar> #> [1] \"-sin(x1)\" covd(\"1/r\", .(-k, +k), g = g_eucl_sph(3)) #> <Scalar> #> [1] \"0\""},{"path":"https://lschneiderbauer.github.io/ricci/reference/create-tensor.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a labeled array (tensor) — tensor","title":"Create a labeled array (tensor) — tensor","text":"Creates labeled array (tensor) array. %_% tensor() serve purpose, typically usage %_% preferred due brevity. tensor() exported provide standard-evaluation interface well might useful circumstances.","code":""},{"path":"https://lschneiderbauer.github.io/ricci/reference/create-tensor.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a labeled array (tensor) — tensor","text":"","code":"tensor(a, index_names, index_positions, call = NULL)  a %_% i"},{"path":"https://lschneiderbauer.github.io/ricci/reference/create-tensor.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a labeled array (tensor) — tensor","text":"array object can coerced array via .array(). index_names character vector index names / labels. index_positions character vector index positions two allowed values \"+\" \"-\", \"upper\" \"lower\" position respectively. length index_positions needs agree length index_names. call internal use . index slot label specification created .().","code":""},{"path":"https://lschneiderbauer.github.io/ricci/reference/create-tensor.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a labeled array (tensor) — tensor","text":"labeled tensor object class \"tensor\", array() attached dimension labels. Note index structure resulting tensor necessarily match . case implicit calculations already triggered (e.g. contractions) index structure reflects resulting tensor.","code":""},{"path":"https://lschneiderbauer.github.io/ricci/reference/create-tensor.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a labeled array (tensor) — tensor","text":"","code":"a <- array(1:4, dim = c(2, 2)) a %_% .(i, j) #> <Labeled Array> [2x2] .(-i, -j) #>      [,1] [,2] #> [1,]    1    3 #> [2,]    2    4"},{"path":"https://lschneiderbauer.github.io/ricci/reference/d.html","id":null,"dir":"Reference","previous_headings":"","what":"Kronecker delta — d","title":"Kronecker delta — d","text":"Provides labeled generalized Kronecker delta. special case two labels represents simply identity matrix. Kronecker delta always even number indices. Note first half tensor labels need lowered, second half needs upper indices. Otherwise error thrown.","code":""},{"path":"https://lschneiderbauer.github.io/ricci/reference/d.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Kronecker delta — d","text":"","code":"d(n)"},{"path":"https://lschneiderbauer.github.io/ricci/reference/d.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Kronecker delta — d","text":"n dimension.","code":""},{"path":"https://lschneiderbauer.github.io/ricci/reference/d.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Kronecker delta — d","text":"function expects index labels (see .()) returns labeled tensor. underlying data differs depending number labels provided.","code":""},{"path":[]},{"path":"https://lschneiderbauer.github.io/ricci/reference/d.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Kronecker delta — d","text":"","code":"d(3)(i, +j) #> <Labeled Array> [3x3] .(-i, +j) #>      [,1] [,2] [,3] #> [1,]    1    0    0 #> [2,]    0    1    0 #> [3,]    0    0    1  d(3)(i, j, +k, +l) #> <Labeled Array> [3x3x3x3] .(-i, -j, +k, +l)"},{"path":"https://lschneiderbauer.github.io/ricci/reference/dot.html","id":null,"dir":"Reference","previous_headings":"","what":"Index slot label specification — .","title":"Index slot label specification — .","text":"function creates index slot label specification. R symbol can serve label. .() typically used conjunction %_%.","code":""},{"path":"https://lschneiderbauer.github.io/ricci/reference/dot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Index slot label specification — .","text":"","code":".(...)"},{"path":"https://lschneiderbauer.github.io/ricci/reference/dot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Index slot label specification — .","text":"... Index labels separated commas optionally prefixed \"+\" \"-\" indicate index position (upper lower respectively). prefix provided, lower index (\"-\") assumed. argument uses non-standard evaluation: R symbol reserved keyword can used.","code":""},{"path":"https://lschneiderbauer.github.io/ricci/reference/dot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Index slot label specification — .","text":"named list two character vectors representing index label names index position.","code":""},{"path":"https://lschneiderbauer.github.io/ricci/reference/dot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Index slot label specification — .","text":"","code":"# three lower index slots .(i, j, k) #> $i #> [1] \"i\" \"j\" \"k\" #>  #> $p #> [1] \"-\" \"-\" \"-\" #>  #> attr(,\"class\") #> [1] \"tensor_indices\"  # one lower and upper index .(i, +j) #> $i #> [1] \"i\" \"j\" #>  #> $p #> [1] \"-\" \"+\" #>  #> attr(,\"class\") #> [1] \"tensor_indices\""},{"path":"https://lschneiderbauer.github.io/ricci/reference/e.html","id":null,"dir":"Reference","previous_headings":"","what":"Levi-Civita epsilon — e","title":"Levi-Civita epsilon — e","text":"Provides labeled Levi-Civita epsilon (pseudo) tensor. indices required lowered. Otherwise error thrown.","code":""},{"path":"https://lschneiderbauer.github.io/ricci/reference/e.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Levi-Civita epsilon — e","text":"","code":"e(...)"},{"path":"https://lschneiderbauer.github.io/ricci/reference/e.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Levi-Civita epsilon — e","text":"... Index labels separated commas optionally prefixed \"+\" \"-\" indicate index position (upper lower respectively). prefix provided, lower index (\"-\") assumed. argument uses non-standard evaluation: R symbol reserved keyword can used.","code":""},{"path":"https://lschneiderbauer.github.io/ricci/reference/e.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Levi-Civita epsilon — e","text":"labeled tensor object. underlying data differs depending number labels provided.","code":""},{"path":[]},{"path":"https://lschneiderbauer.github.io/ricci/reference/e.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Levi-Civita epsilon — e","text":"","code":"e(i, j) #> <Labeled Array> [2x2] .(-i, -j) #>      [,1] [,2] #> [1,]    0    1 #> [2,]   -1    0  e(i, j, k) #> <Labeled Array> [3x3x3] .(-i, -j, -k)"},{"path":"https://lschneiderbauer.github.io/ricci/reference/expect_tensor_equal.html","id":null,"dir":"Reference","previous_headings":"","what":"Does code return the expected value? — expect_tensor_equal","title":"Does code return the expected value? — expect_tensor_equal","text":"Adds expectation function can used testthat package. Compares two tensors determines whether equal .","code":""},{"path":"https://lschneiderbauer.github.io/ricci/reference/expect_tensor_equal.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Does code return the expected value? — expect_tensor_equal","text":"","code":"expect_tensor_equal(object, expected, ...)"},{"path":"https://lschneiderbauer.github.io/ricci/reference/expect_tensor_equal.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Does code return the expected value? — expect_tensor_equal","text":"object, expected Computation value compare . arguments supports limited unquoting make easier generate readable failures within function loop. See quasi_label details. ... Arguments passed waldo::compare tolerance non-NULL, used threshold ignoring small floating point difference comparing numeric vectors. Using non-NULL value cause integer double vectors compared based values, types, ignore difference NaN NA_real_. uses algorithm .equal(), .e., first generate x_diff y_diff subsetting x y look locations differences. check mean(abs(x_diff - y_diff)) / mean(abs(y_diff)) (just mean(abs(x_diff - y_diff)) y_diff small) less tolerance. max_diffs Control maximum number differences shown. default shows 10 differences run interactively differences run CI. Set max_diffs = Inf see differences. ignore_srcref Ignore differences function srcrefs? TRUE default since srcref change behaviour function, printed representation. ignore_encoding Ignore string encoding? TRUE default, R's default behaviour. Use FALSE specifically concerned encoding, just value string.","code":""},{"path":"https://lschneiderbauer.github.io/ricci/reference/expect_tensor_equal.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Does code return the expected value? — expect_tensor_equal","text":"actual value invisibly.","code":""},{"path":"https://lschneiderbauer.github.io/ricci/reference/g_eucl.html","id":null,"dir":"Reference","previous_headings":"","what":"Euclidean metric tensor — g_eucl_cart","title":"Euclidean metric tensor — g_eucl_cart","text":"Provides Euclidean metric tensor \\(\\mathbb{E}^n\\). g_eucl_cart() returns numeric (constant) tensor Cartesian coordinates, $$ds^2=\\sum_{=1}^n dx_i^2$$ g_eucl_sph() returns symbolic tensor field generalized spherical coordinates \\({r, \\phi_1, \\phi_2, ..., \\phi_{n-1}}\\). $$ds^2=dr^2 + r^2 d\\Omega^2$$","code":""},{"path":"https://lschneiderbauer.github.io/ricci/reference/g_eucl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Euclidean metric tensor — g_eucl_cart","text":"","code":"g_eucl_cart(n, coords = paste0(\"x\", 1:n))  g_eucl_sph(n, coords = c(\"r\", paste0(\"ph\", 1:(n - 1))))"},{"path":"https://lschneiderbauer.github.io/ricci/reference/g_eucl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Euclidean metric tensor — g_eucl_cart","text":"n dimension metric tensor. coords character vector coordinate names. length needs match tensor dimensions.","code":""},{"path":"https://lschneiderbauer.github.io/ricci/reference/g_eucl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Euclidean metric tensor — g_eucl_cart","text":"covariant metric tensor array imputed coordinate names.","code":""},{"path":"https://lschneiderbauer.github.io/ricci/reference/g_eucl.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Euclidean metric tensor — g_eucl_cart","text":"usual, spherical coordinates degenerate \\(r = 0\\) \\(\\phi_l = 0\\), careful around points.","code":""},{"path":[]},{"path":"https://lschneiderbauer.github.io/ricci/reference/g_eucl.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Euclidean metric tensor — g_eucl_cart","text":"","code":"g_eucl_cart(3) #> <Covariant metric tensor field> (x1, x2, x3) #>      [,1] [,2] [,3] #> [1,]    1    0    0 #> [2,]    0    1    0 #> [3,]    0    0    1 g_eucl_cart(3) %_% .(+i, +j) #> <Labeled Array> [3x3] .(+i, +j) #>      [,1] [,2] [,3] #> [1,]    1    0    0 #> [2,]    0    1    0 #> [3,]    0    0    1 g_eucl_sph(3) #> <Covariant metric tensor field> (r, ph1, ph2) #>      [,1] [,2]    [,3]             #> [1,] \"1\"  \"0\"     \"0\"              #> [2,] \"0\"  \"r^2*1\" \"0\"              #> [3,] \"0\"  \"0\"     \"r^2*sin(ph1)^2\" g_eucl_sph(3) %_% .(+i, +j) #> <Labeled Array> [3x3] .(+i, +j) #>      [,1] [,2]            [,3]                     #> [1,] \"1\"  \"0\"             \"0\"                      #> [2,] \"0\"  \"(1) / (r^2*1)\" \"0\"                      #> [3,] \"0\"  \"0\"             \"(1) / (r^2*sin(ph1)^2)\""},{"path":"https://lschneiderbauer.github.io/ricci/reference/g_mink.html","id":null,"dir":"Reference","previous_headings":"","what":"Minkowski metric tensor — g_mink_cart","title":"Minkowski metric tensor — g_mink_cart","text":"g_mink_cart() provides covariant metric tensor n dimensions Cartesian coordinates signature \\((-1, 1, 1, ...)\\). $$ds^2=-dx_0^2+\\sum_{=1}^{n-1} dx_i^2$$ g_mink_sph() provides tensor spatial part uses spherical coordinates. $$ds^2=-dt^2 + dr^2 + r^2 d\\Omega^2$$","code":""},{"path":"https://lschneiderbauer.github.io/ricci/reference/g_mink.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Minkowski metric tensor — g_mink_cart","text":"","code":"g_mink_cart(n, coords = paste0(\"x\", 1:n - 1))  g_mink_sph(n, coords = c(\"t\", \"r\", paste0(\"ph\", 1:(n - 2))))"},{"path":"https://lschneiderbauer.github.io/ricci/reference/g_mink.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Minkowski metric tensor — g_mink_cart","text":"n dimension metric tensor. coords character vector coordinate names. length needs match tensor dimensions.","code":""},{"path":"https://lschneiderbauer.github.io/ricci/reference/g_mink.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Minkowski metric tensor — g_mink_cart","text":"covariant metric tensor array imputed coordinate names.","code":""},{"path":[]},{"path":"https://lschneiderbauer.github.io/ricci/reference/g_mink.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Minkowski metric tensor — g_mink_cart","text":"","code":"g_mink_cart(4) #> <Covariant metric tensor field> (x0, x1, x2, x3) #>      [,1] [,2] [,3] [,4] #> [1,]   -1    0    0    0 #> [2,]    0    1    0    0 #> [3,]    0    0    1    0 #> [4,]    0    0    0    1 g_mink_cart(4) %_% .(+i, +j) #> <Labeled Array> [4x4] .(+i, +j) #>      [,1] [,2] [,3] [,4] #> [1,]   -1    0    0    0 #> [2,]    0    1    0    0 #> [3,]    0    0    1    0 #> [4,]    0    0    0    1 g_mink_sph(4) #> <Covariant metric tensor field> (t, r, ph1, ph2) #>      [,1] [,2] [,3]    [,4]             #> [1,] \"-1\" \"0\"  \"0\"     \"0\"              #> [2,] \"0\"  \"1\"  \"0\"     \"0\"              #> [3,] \"0\"  \"0\"  \"r^2*1\" \"0\"              #> [4,] \"0\"  \"0\"  \"0\"     \"r^2*sin(ph1)^2\" g_mink_sph(4) %_% .(+i, +j) #> <Labeled Array> [4x4] .(+i, +j) #>      [,1] [,2] [,3]            [,4]                     #> [1,] \"-1\" \"0\"  \"0\"             \"0\"                      #> [2,] \"0\"  \"1\"  \"0\"             \"0\"                      #> [3,] \"0\"  \"0\"  \"(1) / (r^2*1)\" \"0\"                      #> [4,] \"0\"  \"0\"  \"0\"             \"(1) / (r^2*sin(ph1)^2)\""},{"path":"https://lschneiderbauer.github.io/ricci/reference/g_sph.html","id":null,"dir":"Reference","previous_headings":"","what":"Metric tensor of the sphere — g_sph","title":"Metric tensor of the sphere — g_sph","text":"Provides metric tensor sphere \\(S^n\\) radius 1. g_sph() returns symbolic tensor field generalized spherical coordinates \\({\\phi_1, \\phi_2, ..., \\phi_{n-1}}\\). $$d\\Omega^2= d\\phi_1^2 + \\sum_{=1}^{n-1} \\prod_{m=1}^{-1} sin(\\phi_m)^2 d\\phi_i^2$$","code":""},{"path":"https://lschneiderbauer.github.io/ricci/reference/g_sph.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Metric tensor of the sphere — g_sph","text":"","code":"g_sph(n, coords = paste0(\"ph\", 1:n))"},{"path":"https://lschneiderbauer.github.io/ricci/reference/g_sph.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Metric tensor of the sphere — g_sph","text":"n dimension metric tensor. coords character vector coordinate names. length needs match tensor dimensions.","code":""},{"path":"https://lschneiderbauer.github.io/ricci/reference/g_sph.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Metric tensor of the sphere — g_sph","text":"covariant metric tensor array imputed coordinate names.","code":""},{"path":"https://lschneiderbauer.github.io/ricci/reference/g_sph.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Metric tensor of the sphere — g_sph","text":"usual, spherical coordinates degenerate \\(\\phi_l = 0\\), careful around points.","code":""},{"path":[]},{"path":"https://lschneiderbauer.github.io/ricci/reference/g_sph.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Metric tensor of the sphere — g_sph","text":"","code":"g_sph(3) #> <Covariant metric tensor field> (ph1, ph2, ph3) #>      [,1] [,2]         [,3]                          #> [1,] \"1\"  \"0\"          \"0\"                           #> [2,] \"0\"  \"sin(ph1)^2\" \"0\"                           #> [3,] \"0\"  \"0\"          \"(sin(ph1)^2) * (sin(ph2)^2)\" g_sph(3) %_% .(+i, +j) #> <Labeled Array> [3x3] .(+i, +j) #>      [,1] [,2]                 [,3]                                  #> [1,] \"1\"  \"0\"                  \"0\"                                   #> [2,] \"0\"  \"(1) / (sin(ph1)^2)\" \"0\"                                   #> [3,] \"0\"  \"0\"                  \"(1) / ((sin(ph1)^2) * (sin(ph2)^2))\""},{"path":"https://lschneiderbauer.github.io/ricci/reference/g_ss.html","id":null,"dir":"Reference","previous_headings":"","what":"Schwarzschild metric tensor — g_ss","title":"Schwarzschild metric tensor — g_ss","text":"Provides metric tensor Einstein equation's Schwarzschild solution Schwarzschild coordinates Schwarzschild radius \\(r_s\\) set 1. $$ds^2 = - \\left(1-\\frac{r_s}{r}\\right) dt^2 + \\left(1-\\frac{r_s}{r}\\right)^{-1} dr^r + r^2 d\\Omega^2$$","code":""},{"path":"https://lschneiderbauer.github.io/ricci/reference/g_ss.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Schwarzschild metric tensor — g_ss","text":"","code":"g_ss(n, coords = c(\"t\", \"r\", paste0(\"ph\", 1:(n - 2))))"},{"path":"https://lschneiderbauer.github.io/ricci/reference/g_ss.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Schwarzschild metric tensor — g_ss","text":"n dimension metric tensor. coords character vector coordinate names. length needs match tensor dimensions.","code":""},{"path":"https://lschneiderbauer.github.io/ricci/reference/g_ss.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Schwarzschild metric tensor — g_ss","text":"covariant metric tensor array imputed coordinate names.","code":""},{"path":"https://lschneiderbauer.github.io/ricci/reference/g_ss.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Schwarzschild metric tensor — g_ss","text":"Note Schwarzschild coordinates become singular Schwarzschild radius (event horizon) \\(r=r_s=1\\) \\(r=0\\).","code":""},{"path":[]},{"path":"https://lschneiderbauer.github.io/ricci/reference/g_ss.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Schwarzschild metric tensor — g_ss","text":"","code":"g_ss(4) #> <Covariant metric tensor field> (t, r, ph1, ph2) #>      [,1]       [,2]        [,3]    [,4]             #> [1,] \"-(1-1/r)\" \"0\"         \"0\"     \"0\"              #> [2,] \"0\"        \"1/(1-1/r)\" \"0\"     \"0\"              #> [3,] \"0\"        \"0\"         \"r^2*1\" \"0\"              #> [4,] \"0\"        \"0\"         \"0\"     \"r^2*sin(ph1)^2\" g_ss(4) %_% .(+i, +j) #> <Labeled Array> [4x4] .(+i, +j) #>      [,1]               [,2]                [,3]            #> [1,] \"(1) / (-(1-1/r))\" \"0\"                 \"0\"             #> [2,] \"0\"                \"(1) / (1/(1-1/r))\" \"0\"             #> [3,] \"0\"                \"0\"                 \"(1) / (r^2*1)\" #> [4,] \"0\"                \"0\"                 \"0\"             #>      [,4]                     #> [1,] \"0\"                      #> [2,] \"0\"                      #> [3,] \"0\"                      #> [4,] \"(1) / (r^2*sin(ph1)^2)\""},{"path":"https://lschneiderbauer.github.io/ricci/reference/kron.html","id":null,"dir":"Reference","previous_headings":"","what":"Kronecker product — kron","title":"Kronecker product — kron","text":"Kronecker product simply tensor product whose underlying vector space basis relabeled. present context realized combining multiple index labels one. associated dimension new label simply product dimensions associated old index labels respectively.","code":""},{"path":"https://lschneiderbauer.github.io/ricci/reference/kron.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Kronecker product — kron","text":"","code":"kron(x, ...)"},{"path":"https://lschneiderbauer.github.io/ricci/reference/kron.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Kronecker product — kron","text":"x labeled tensor object, created %_% tensor(). ... number expressions (separated comma) form .(<label1>, <label2>, ..., <labeln-1>) -> <labeln+1>.","code":""},{"path":"https://lschneiderbauer.github.io/ricci/reference/kron.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Kronecker product — kron","text":"modified tensor object.","code":""},{"path":[]},{"path":"https://lschneiderbauer.github.io/ricci/reference/kron.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Kronecker product — kron","text":"","code":"a <- array(1:8, dim = c(2, 2, 2)) a %_% .(i, j, k) |> kron(.(i, j) -> l) #> <Labeled Array> [4x2] .(-l, -k) #>      [,1] [,2] #> [1,]    1    5 #> [2,]    2    6 #> [3,]    3    7 #> [4,]    4    8"},{"path":"https://lschneiderbauer.github.io/ricci/reference/l.html","id":null,"dir":"Reference","previous_headings":"","what":"Lower tensor indices — l","title":"Lower tensor indices — l","text":"l() lowers specified tensor indices using covariant metric tensor provided g. Note order indices preserved due performance reasons. error thrown specified indices exist correct position.","code":""},{"path":"https://lschneiderbauer.github.io/ricci/reference/l.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Lower tensor indices — l","text":"","code":"l(x, ..., g = NULL)"},{"path":"https://lschneiderbauer.github.io/ricci/reference/l.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Lower tensor indices — l","text":"x labeled tensor object, created %_% tensor(). ... number index expressions. indices need occur x. g covariant metric tensor, \"metric_field\" object. See metric_field() create new metric tensor, use predefined metrics, e.g. g_eucl_cart(). metric tensor provided, indices raised/lowered identity matrix.","code":""},{"path":"https://lschneiderbauer.github.io/ricci/reference/l.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Lower tensor indices — l","text":"modified tensor object.","code":""},{"path":[]},{"path":"https://lschneiderbauer.github.io/ricci/reference/metric_field.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a metric tensor field — metric_field","title":"Create a metric tensor field — metric_field","text":"Metric tensors essential ingredient (Pseudo-) Riemannian manifolds define distance relations points. used define geometric tensors e.g. Ricci curvature ricci(), metric connection, .e. covariant derivative. also essential raising lowering indices tensor fields correctly using non-flat coordinates.","code":""},{"path":"https://lschneiderbauer.github.io/ricci/reference/metric_field.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a metric tensor field — metric_field","text":"","code":"metric_field(metric, metric_inv, coords)"},{"path":"https://lschneiderbauer.github.io/ricci/reference/metric_field.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a metric tensor field — metric_field","text":"metric nxn matrix / array representing covariant metric tensor components. components usually expressions character strings formed coordinates, since numeric values can represent constant tensor fields. metric_inv nxn matrix / array representing contraviant metric tensor components, .e. inverse matrix covariant metric tensor component matrix. coords character vector n coordinate names used component expressions. information essential forming symbolic derivatives.","code":""},{"path":"https://lschneiderbauer.github.io/ricci/reference/metric_field.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a metric tensor field — metric_field","text":"object class c(\"metric_field\", \"array\") represents components metric tensor (Pseudo-) Riemannian manifold certain coordinate system specified coords.","code":""},{"path":[]},{"path":"https://lschneiderbauer.github.io/ricci/reference/r.html","id":null,"dir":"Reference","previous_headings":"","what":"Raise tensor indices — r","title":"Raise tensor indices — r","text":"r() raises specified tensor indices using covariant metric tensor provided g. Note order indices preserved due performance reasons. error thrown specified indices exist correct position.","code":""},{"path":"https://lschneiderbauer.github.io/ricci/reference/r.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Raise tensor indices — r","text":"","code":"r(x, ..., g = NULL)"},{"path":"https://lschneiderbauer.github.io/ricci/reference/r.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Raise tensor indices — r","text":"x labeled tensor object, created %_% tensor(). ... number index expressions. indices need occur x. g covariant metric tensor, \"metric_field\" object. See metric_field() create new metric tensor, use predefined metrics, e.g. g_eucl_cart(). metric tensor provided, indices raised/lowered identity matrix.","code":""},{"path":"https://lschneiderbauer.github.io/ricci/reference/r.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Raise tensor indices — r","text":"modified tensor object.","code":""},{"path":[]},{"path":"https://lschneiderbauer.github.io/ricci/reference/ricci.html","id":null,"dir":"Reference","previous_headings":"","what":"Ricci curvature tensor — ricci","title":"Ricci curvature tensor — ricci","text":"Provides covariant Ricci curvature tensor \\(R_{ij}=R^{s}_{s j}\\).","code":""},{"path":"https://lschneiderbauer.github.io/ricci/reference/ricci.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Ricci curvature tensor — ricci","text":"","code":"ricci(g)"},{"path":"https://lschneiderbauer.github.io/ricci/reference/ricci.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Ricci curvature tensor — ricci","text":"g covariant metric tensor, \"metric_field\" object. See metric_field() create new metric tensor, use predefined metrics, e.g. g_eucl_cart().","code":""},{"path":"https://lschneiderbauer.github.io/ricci/reference/ricci.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Ricci curvature tensor — ricci","text":"Returns covariant Ricci curvature tensor \\(R_{ij}\\) rank 2 array().","code":""},{"path":[]},{"path":"https://lschneiderbauer.github.io/ricci/reference/ricci.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Ricci curvature tensor — ricci","text":"","code":"ricci(g_eucl_sph(3)) #>      [,1] [,2] [,3] #> [1,] \"0\"  \"0\"  \"0\"  #> [2,] \"0\"  \"0\"  \"0\"  #> [3,] \"0\"  \"0\"  \"0\""},{"path":"https://lschneiderbauer.github.io/ricci/reference/ricci_sc.html","id":null,"dir":"Reference","previous_headings":"","what":"Ricci scalar — ricci_sc","title":"Ricci scalar — ricci_sc","text":"Provides Ricci scalar \\(R\\).","code":""},{"path":"https://lschneiderbauer.github.io/ricci/reference/ricci_sc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Ricci scalar — ricci_sc","text":"","code":"ricci_sc(g)"},{"path":"https://lschneiderbauer.github.io/ricci/reference/ricci_sc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Ricci scalar — ricci_sc","text":"g covariant metric tensor, \"metric_field\" object. See metric_field() create new metric tensor, use predefined metrics, e.g. g_eucl_cart().","code":""},{"path":"https://lschneiderbauer.github.io/ricci/reference/ricci_sc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Ricci scalar — ricci_sc","text":"Returns Ricci scalar \\(R\\) single number/expression.","code":""},{"path":[]},{"path":"https://lschneiderbauer.github.io/ricci/reference/ricci_sc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Ricci scalar — ricci_sc","text":"","code":"ricci_sc(g_eucl_sph(3)) #> [1] \"0\""},{"path":"https://lschneiderbauer.github.io/ricci/reference/riemann.html","id":null,"dir":"Reference","previous_headings":"","what":"Riemann curvature tensor — riemann","title":"Riemann curvature tensor — riemann","text":"Provides covariant Riemann curvature tensor \\(R_{ijkl}\\).","code":""},{"path":"https://lschneiderbauer.github.io/ricci/reference/riemann.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Riemann curvature tensor — riemann","text":"","code":"riemann(g)"},{"path":"https://lschneiderbauer.github.io/ricci/reference/riemann.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Riemann curvature tensor — riemann","text":"g covariant metric tensor, \"metric_field\" object. See metric_field() create new metric tensor, use predefined metrics, e.g. g_eucl_cart().","code":""},{"path":"https://lschneiderbauer.github.io/ricci/reference/riemann.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Riemann curvature tensor — riemann","text":"Returns covariant Riemann curvature tensor \\(R_{ijkl}\\) rank 4 array().","code":""},{"path":[]},{"path":"https://lschneiderbauer.github.io/ricci/reference/riemann.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Riemann curvature tensor — riemann","text":"","code":"riemann(g_eucl_sph(3)) #> <Labeled Array> [3x3x3x3] .(-j, -l, -k, -i2)"},{"path":"https://lschneiderbauer.github.io/ricci/reference/simplify.html","id":null,"dir":"Reference","previous_headings":"","what":"Simplify symbolic expressions — simplify","title":"Simplify symbolic expressions — simplify","text":"Attempts simplify expressions array tensor. Non-array objects coerced arrays .array().","code":""},{"path":"https://lschneiderbauer.github.io/ricci/reference/simplify.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simplify symbolic expressions — simplify","text":"","code":"simplify(x)"},{"path":"https://lschneiderbauer.github.io/ricci/reference/simplify.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simplify symbolic expressions — simplify","text":"x character array() tensor() consisting mathematical expressions.","code":""},{"path":"https://lschneiderbauer.github.io/ricci/reference/simplify.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simplify symbolic expressions — simplify","text":"character array() tensor() form, potentially simplified expressions.","code":""},{"path":"https://lschneiderbauer.github.io/ricci/reference/simplify.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Simplify symbolic expressions — simplify","text":"Instead using explicit call simplify() also option enable automatic simplification via option(ricci.auto_simplify = TRUE). Note however comes significant performance cost. operation requires Ryacas package.","code":""},{"path":"https://lschneiderbauer.github.io/ricci/reference/simplify.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simplify symbolic expressions — simplify","text":"","code":"simplify(\"x + y - x\") #> [1] \"y\" #> attr(,\"simplified\") #> [1] TRUE"},{"path":"https://lschneiderbauer.github.io/ricci/reference/subst.html","id":null,"dir":"Reference","previous_headings":"","what":"Substitute tensor labels — subst","title":"Substitute tensor labels — subst","text":"Substitutes tensor labels labels. simply renaming procedure. operation might trigger implicit diagonal subsetting. error thrown specified indices exist.","code":""},{"path":"https://lschneiderbauer.github.io/ricci/reference/subst.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Substitute tensor labels — subst","text":"","code":"subst(x, ...)"},{"path":"https://lschneiderbauer.github.io/ricci/reference/subst.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Substitute tensor labels — subst","text":"x labeled tensor object, created %_% tensor(). ... number expressions (separated comma) form <label1> -> <label2>.","code":""},{"path":"https://lschneiderbauer.github.io/ricci/reference/subst.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Substitute tensor labels — subst","text":"modified tensor object.","code":""},{"path":[]},{"path":"https://lschneiderbauer.github.io/ricci/reference/sym.html","id":null,"dir":"Reference","previous_headings":"","what":"Symmetric tensor part — sym","title":"Symmetric tensor part — sym","text":"Takes symmetric tensor part tensor x respect specified indices .... error thrown specified indices exist.","code":""},{"path":"https://lschneiderbauer.github.io/ricci/reference/sym.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Symmetric tensor part — sym","text":"","code":"sym(x, ...)"},{"path":"https://lschneiderbauer.github.io/ricci/reference/sym.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Symmetric tensor part — sym","text":"x labeled tensor object, created %_% tensor(). ... number index expressions. indices need occur x.","code":""},{"path":"https://lschneiderbauer.github.io/ricci/reference/sym.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Symmetric tensor part — sym","text":"modified tensor object.","code":""},{"path":[]},{"path":"https://lschneiderbauer.github.io/ricci/reference/sym.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Symmetric tensor part — sym","text":"","code":"a <- array(1:4, dim = c(2, 2)) a %_% .(i, j) |> sym(i, j) #> <Labeled Array> [2x2] .(-i, -j) #>      [,1] [,2] #> [1,]  1.0  2.5 #> [2,]  2.5  4.0"},{"path":[]},{"path":"https://lschneiderbauer.github.io/ricci/news/index.html","id":"ricci-011","dir":"Changelog","previous_headings":"","what":"ricci 0.1.1","title":"ricci 0.1.1","text":"CRAN release: 2025-09-04 Initial CRAN submission.","code":""}]
